import {
    Lucid,
    Blockfrost,
    Address,
    MintingPolicy,
    PolicyId,
    Unit,
    fromText,
    Data, C, getAddressDetails, applyParamsToScript
} from "https://deno.land/x/lucid/mod.ts";


// set blockfrost endpoint
const lucid = await Lucid.new(
    new Blockfrost(
        "https://cardano-preprod.blockfrost.io/api/v0",
        "preprodbKlbHWpurKZC9GN8ZBmBURVnDhf4FMXy"
    ),
    "Preprod"
);

// deno run -A minting.ts

const privateKey ="ed25519_sk1uv6pp8rm92a9djd224q9q65luspkjc53zug27rz3drukz0wfgqzqrrr93k"
lucid.selectWalletFromPrivateKey(privateKey);

const addr: Address = await lucid.wallet.address();
console.log("own address: " + addr);

const pkh: string = getAddressDetails(addr).paymentCredential?.hash || "";
console.log("own pubkey hash: " + pkh);

const Params = Data.Tuple([Data.Bytes()]);
type Params = Data.Static<typeof Params>;
const signedPolicy: MintingPolicy = {
    type: "PlutusV2",
    script: applyParamsToScript<Params>(
        "5907fa5907f701000032323233223232323232323232323322323322323232323232232223232533553353235001222222222222533533355301412001321233001225335002210031001002501d25335333573466e3c04c0040a80a44d407c00454078010840a840a0d4cccd5cd19b8735573aa0049000119910919800801801191919191919191919191919191999ab9a3370e6aae754031200023333333333332222222222221233333333333300100d00c00b00a00900800700600500400300233501701835742a01866a02e0306ae85402ccd405c064d5d0a805199aa80dbae501a35742a012666aa036eb94068d5d0a80419a80b8121aba150073335501b02575a6ae854018c8c8c8cccd5cd19b8735573aa00490001199109198008018011919191999ab9a3370e6aae754009200023322123300100300233502f75a6ae854008c0c0d5d09aba2500223263203233573806806a06026aae7940044dd50009aba150023232323333573466e1cd55cea8012400046644246600200600466a05eeb4d5d0a80118181aba135744a004464c6406466ae700d00d40c04d55cf280089baa001357426ae8940088c98c80b8cd5ce01801881609aab9e5001137540026ae854014cd405dd71aba150043335501b021200135742a006666aa036eb88004d5d0a80118119aba135744a004464c6405466ae700b00b40a04d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a80118099aba135744a004464c6403866ae7007807c0688800840704cd5ce24811f42656e65666963696172792773207369676e6174757265206d697373696e670001b101e16135573ca00226ea8004dd7000990009aa80c1108911299a80089a80191000910999a802910011802001199aa9803890008028020008919118011bac001320013550182233335573e0024a014466a01260086ae84008c00cd5d100100c919191999ab9a3370e6aae7540092000233221233001003002300e35742a004600a6ae84d5d1280111931900b19ab9c018019014135573ca00226ea80048c8c8c8c8cccd5cd19b8735573aa00890001199991110919998008028020018011919191999ab9a3370e6aae7540092000233221233001003002301735742a00466a01e02c6ae84d5d1280111931900d99ab9c01d01e019135573ca00226ea8004d5d0a802199aa8043ae500735742a0066464646666ae68cdc3a800a4008464244460040086ae84d55cf280191999ab9a3370ea0049001119091118008021bae357426aae7940108cccd5cd19b875003480008488800c8c98c8074cd5ce00f81000d80d00c89aab9d5001137540026ae854008cd402dd71aba135744a004464c6402e66ae700640680544d5d1280089aba25001135573ca00226ea80044cd54005d73ad112232230023756002640026aa02a44646666aae7c008940208cd401ccc8848cc00400c008c018d55cea80118029aab9e500230043574400602e26ae840044488008488488cc00401000c488c8c8cccd5cd19b875001480008d401cc014d5d09aab9e500323333573466e1d400920022500723263201233573802802a02001e26aae7540044dd50008909118010018891000919191999ab9a3370ea002900311909111180200298039aba135573ca00646666ae68cdc3a8012400846424444600400a60126ae84d55cf280211999ab9a3370ea006900111909111180080298039aba135573ca00a46666ae68cdc3a8022400046424444600600a6eb8d5d09aab9e500623263201033573802402601c01a01801626aae7540044dd5000919191999ab9a3370e6aae7540092000233221233001003002300535742a0046eb4d5d09aba2500223263200c33573801c01e01426aae7940044dd50009191999ab9a3370e6aae75400520002375c6ae84d55cf280111931900519ab9c00c00d00813754002464646464646666ae68cdc3a800a401842444444400646666ae68cdc3a8012401442444444400846666ae68cdc3a801a40104664424444444660020120106eb8d5d0a8029bad357426ae8940148cccd5cd19b875004480188cc8848888888cc008024020dd71aba15007375c6ae84d5d1280391999ab9a3370ea00a900211991091111111980300480418061aba15009375c6ae84d5d1280491999ab9a3370ea00c900111909111111180380418069aba135573ca01646666ae68cdc3a803a400046424444444600a010601c6ae84d55cf280611931900999ab9c01501601101000f00e00d00c00b135573aa00826aae79400c4d55cf280109aab9e5001137540024646464646666ae68cdc3a800a4004466644424466600200a0080066eb4d5d0a8021bad35742a0066eb4d5d09aba2500323333573466e1d4009200023212230020033008357426aae7940188c98c8030cd5ce00700780500489aab9d5003135744a00226aae7940044dd5000919191999ab9a3370ea002900111909118008019bae357426aae79400c8cccd5cd19b875002480008c8488c00800cdd71aba135573ca008464c6401266ae7002c03001c0184d55cea80089baa00112232323333573466e1d400520042122200123333573466e1d40092002232122230030043006357426aae7940108cccd5cd19b87500348000848880088c98c8028cd5ce00600680400380309aab9d5001137540024646666ae68cdc3a800a4004400c46666ae68cdc3a80124000400c464c6400c66ae7002002401000c4d55ce9baa00149848800848800524010350543100120011123230010012233003300200200101",
        [pkh],
        Params)
};

const policyId: PolicyId = lucid.utils.mintingPolicyToId(signedPolicy);
console.log("minting policy: " + policyId);

const unit: Unit = policyId + fromText("Token");

function readAmount(): bigint {
    const input = prompt("amount: ");
    return input ? BigInt(Number.parseInt(input)) : 1000000n;
}

const amount: bigint = readAmount();

const tx = await lucid
    .newTx()
    .mintAssets({[unit]: amount}, Data.void())
    .attachMintingPolicy(signedPolicy)
    .addSignerKey(pkh)
    .complete();

const signedTx = await tx.sign().complete();
const txHash = await signedTx.submit();
console.log("tid: " + txHash);